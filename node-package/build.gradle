plugins {
    id "com.moowork.node"
}

node {
    version = gradle.nodeVersion
    npmVersion = gradle.npmVersion

    download = true
}

configurations {
    cliBinary
    cliRuntime
}

def PROPERTY_PACKAGE_VERSION = "dukat.npm.version"
def PROPERTY_REGISTRY = "dukat.npm.registry"

task fetchRuntime(type: Copy) {
    from configurations.cliBinary
    into "${project.buildDir}/runtime"

    from configurations.cliRuntime
    into "${project.buildDir}/runtime"
    rename "js-${gradle.graalVersion}.jar", "js.jar"
}

task npmVersion(type: NpmTask) {
    onlyIf {
        project.hasProperty(PROPERTY_PACKAGE_VERSION)
    }
    args = ["version", project.findProperty(PROPERTY_PACKAGE_VERSION) ?: "NEVER" ]
}

task npmPack(type: NpmTask) {
    dependsOn = [fetchRuntime, ":cli:build", npmVersion]
    args = ["pack"]
}

task npmrc() {
    doLast {
        def token = getProperty("kotlin.npmjs.auth.token")
        def registry = project.findProperty(PROPERTY_REGISTRY) ?: "registry.npmjs.org"
        def customConfig = """
//${registry}/:_authToken="${token}"
        """
        def configFile = "$projectDir/.npmrc"
        file(configFile).text = customConfig;
    }
}

task npmPublish(type: NpmTask) {
    dependsOn = [npmrc, npmPack]

    def packageVersion =
            project.findProperty(PROPERTY_PACKAGE_VERSION) ?:
            new groovy.json.JsonSlurper().parseText(file("package.json").text).version

    def distribPath = "dukat-${packageVersion}.tgz"

    def registry = project.findProperty(PROPERTY_REGISTRY) ?: "registry.npmjs.org"
    args = ["publish",  distribPath, "--prefix", projectDir,  "--registry", "http://${registry}"]
}

dependencies {
    cliBinary(project(":cli")) {
        transitive = false
    }

    cliRuntime("org.graalvm.js:js:${gradle.graalVersion}") {
        transitive = false
    }
}