
interface A {}
interface B {}
interface C {}

declare interface StaticApi {
  (selector: string, context?: A | B): A;
  (element: B): A;
  (): A;

  (html: string, ownerDocument?: C): A;
  (html: string, attributes: Object): A;
}

declare function ping(a: number, b: number, c: number, d?:number, e?: number, f?: number);
declare function ping(id: string);

declare interface Extreme {
  pong(o?: A | B);
  ping(a: string, b?: A | B);
  foo(a: number, b: number, c: number, d?:number, e?: number, f?: number);
  foo(a: string);
}

declare interface Simple {
  ping(a: string, b?: A);
  foo(a: number, b: number, c: number, d?:number, e?: number, f?: number);
}


declare class BaseApi {
  register(preference?: "A" | "B" | "C");
  completelyOptional(a?: number, b?: number, c?: number | string | boolean)
}

declare class SimpleApi extends BaseApi {
  constructor(a?: string);
}